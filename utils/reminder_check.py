#!/usr/bin/env python3
from pathlib import Path
import sys
import yaml
import requests
from datetime import datetime

METADATA_DIR = Path("metadata")
TODAY = datetime.now().date()
REMINDER_DAYS = [1, 3, 7, 14]

try:
    REPO = os.environ["REPO"]
    GITHUB_TOKEN = os.environ["GITHUB_TOKEN"]
except KeyError as e:
    print(f"‚ùå Required environment variable {e} not found!")
    sys.exit(1)

def parse_date(date_str):
    """Parse a date string in YYYY-MM-DD format."""
    return datetime.strptime(date_str, "%Y-%m-%d").date()

def create_github_issue(title, body):
    """Create a GitHub issue using the REST API."""
    print(f"Creating issue: {title}")
    
    url = f"https://api.github.com/repos/{REPO}/issues"
    headers = {
        'Authorization': f'token {GITHUB_TOKEN}',
        'Accept': 'application/vnd.github.v3+json'
    }
    data = {
        'title': title,
        'body': body,
        'labels': ['review-reminder']
    }
    
    response = requests.post(url, headers=headers, json=data)
    if response.status_code == 201:
        print(f"‚úÖ Successfully created issue: {title}")
        return True
    else:
        print(f"‚ùå Failed to create issue. Status code: {response.status_code}")
        print(f"Response: {response.text}")
        return False

def main():
    """Main function to check for algorithms needing review."""
    if not METADATA_DIR.exists() or not METADATA_DIR.is_dir():
        print(f"‚ùå Metadata directory '{METADATA_DIR}' not found!")
        sys.exit(1)

    reminders_created = 0

    files = list(METADATA_DIR.glob("*.yaml")) + list(METADATA_DIR.glob("*.yml"))

    for file_path in files:
        try:
            print(f"Processing {file_path}")

            with file_path.open() as f:
                data = yaml.safe_load(f)

                algo = data.get("algorithm", data.get("name", "Unknown Algorithm"))

                if "first_learned" not in data:
                    print(f"‚ö†Ô∏è No 'first_learned' field in {file_path.name}")
                    continue

                learned_on = parse_date(data["first_learned"])
                days_since = (TODAY - learned_on).days

                notes_path = data.get("notes_path", "")
                if notes_path:
                    notes_md = f"- [View your notes]({notes_path})"
                else:
                    notes_md = "*No notes path provided.*"

                if days_since in REMINDER_DAYS:
                    title = f"üîÅ Review Reminder: {algo} (Day {days_since})"
                    body = f"""## Time to review {algo}!

It's been {days_since} days since you learned this algorithm.

**Spaced repetition** helps move knowledge to long-term memory.

### Review Material:
{notes_md}

*This reminder was automatically generated by your algorithm learning system.*
"""
                    if create_github_issue(title, body):
                        reminders_created += 1

        except Exception as e:
            print(f"‚ùå Error processing file {file_path.name}: {str(e)}")

    print(f"‚úÖ Reminder check complete. Created {reminders_created} reminder issue(s).")

if __name__ == "__main__":
    main()